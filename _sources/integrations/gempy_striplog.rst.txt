
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "integrations/gempy_striplog.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_integrations_gempy_striplog.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_integrations_gempy_striplog.py:


Transform 2019: Integrating Striplog and GemPy
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 8-9

! pip install welly striplog

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Authors: M. de la Varga, Evan Bianco, Brian Burnham and Dieter Werthm√ºller
Importing GemPy

.. GENERATED FROM PYTHON SOURCE LINES 13-27

.. code-block:: python3

    import gempy as gp

    # Importing auxiliary libraries
    import numpy as np
    import pandas as pn
    import matplotlib.pyplot as plt
    import os
    import welly
    from welly import Location, Project
    import glob
    from striplog import Striplog, Legend, Decor

    pn.set_option('precision', 2)








.. GENERATED FROM PYTHON SOURCE LINES 28-31

Creating striplog object
-----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 33-34

get well header coordinates

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: python3

    well_heads = {'alpha': {'kb_coords': (0, 0, 0)},
                  'beta': {'kb_coords': (10, 10, 0)},
                  'gamma': {'kb_coords': (12, 0, 0)},
                  'epsilon': {'kb_coords': (20, 0, 0)}}








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Reading tops file

.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: python3

    cwd = os.getcwd()
    if 'examples' not in cwd:
        data_path = os.getcwd() + '/examples'
    else:
        data_path = cwd + '/..'

    print(data_path+'/data/input_data/striplog_integration/*.tops')
    topsfiles = glob.glob(data_path+'/data/input_data/striplog_integration/*.tops')
    topsfiles





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /WorkSSD/PythonProjects/gempy/examples/integrations/../data/input_data/striplog_integration/*.tops

    ['/WorkSSD/PythonProjects/gempy/examples/integrations/../data/input_data/striplog_integration/alpha_strip.tops', '/WorkSSD/PythonProjects/gempy/examples/integrations/../data/input_data/striplog_integration/beta_strip.tops', '/WorkSSD/PythonProjects/gempy/examples/integrations/../data/input_data/striplog_integration/epsilon_strip.tops', '/WorkSSD/PythonProjects/gempy/examples/integrations/../data/input_data/striplog_integration/gamma_strip.tops']



.. GENERATED FROM PYTHON SOURCE LINES 52-53

Creating striplog object

.. GENERATED FROM PYTHON SOURCE LINES 53-68

.. code-block:: python3

    my_striplogs = []

    for file in topsfiles:
        with open(file) as f:
            text = f.read()
            striplog = Striplog.from_csv(text=text)
            my_striplogs.append(striplog)

    striplog_dict = {'alpha': my_striplogs[1],
                     'beta': my_striplogs[2],
                     'gamma': my_striplogs[3],
                     'epsilon': my_striplogs[0]}

    striplog_dict['alpha'][0]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><td style="width:2em; background-color:#DDDDDD" rowspan="6"></td><td><strong>top</strong></td><td>0.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>lith</strong></td><td>overburden</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>50.00 m of overburden</td></tr><tr><td><strong>description</strong></td><td></td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>50.0</td></tr></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-70

Plot striplog

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: python3

    f, a = plt.subplots(ncols=4, sharey=True)

    for e, log in enumerate(striplog_dict.items()):
        log[1].plot(ax=a[e], legend=None)
    f.tight_layout()
    plt.show()




.. image:: /integrations/images/sphx_glr_gempy_striplog_001.png
    :alt: gempy striplog
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

Striplog to pandas df of bottoms

.. GENERATED FROM PYTHON SOURCE LINES 79-92

.. code-block:: python3

    rows = []
    for wellname in striplog_dict.keys():
        for i, interval in enumerate(striplog_dict[wellname]):
            surface_name = interval.primary.lith
            surface_base = interval.base.middle
            x, y = well_heads[wellname]['kb_coords'][:-1]
            series = 1
            rows.append([x, y, surface_base, surface_name, series, wellname])

    column_names = ['X', 'Y', 'Z', 'surface', 'series', 'wellname']
    df = pn.DataFrame(rows, columns=column_names)
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>surface</th>
          <th>series</th>
          <th>wellname</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>0</td>
          <td>50.0</td>
          <td>overburden</td>
          <td>1</td>
          <td>alpha</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>0</td>
          <td>80.0</td>
          <td>miguel</td>
          <td>1</td>
          <td>alpha</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>0</td>
          <td>100.0</td>
          <td>evan</td>
          <td>1</td>
          <td>alpha</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0</td>
          <td>0</td>
          <td>130.0</td>
          <td>brian</td>
          <td>1</td>
          <td>alpha</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>0</td>
          <td>131.0</td>
          <td>dieter</td>
          <td>1</td>
          <td>alpha</td>
        </tr>
        <tr>
          <th>5</th>
          <td>10</td>
          <td>10</td>
          <td>50.0</td>
          <td>overburden</td>
          <td>1</td>
          <td>beta</td>
        </tr>
        <tr>
          <th>6</th>
          <td>10</td>
          <td>10</td>
          <td>75.0</td>
          <td>miguel</td>
          <td>1</td>
          <td>beta</td>
        </tr>
        <tr>
          <th>7</th>
          <td>10</td>
          <td>10</td>
          <td>110.0</td>
          <td>brian</td>
          <td>1</td>
          <td>beta</td>
        </tr>
        <tr>
          <th>8</th>
          <td>10</td>
          <td>10</td>
          <td>111.0</td>
          <td>dieter</td>
          <td>1</td>
          <td>beta</td>
        </tr>
        <tr>
          <th>9</th>
          <td>12</td>
          <td>0</td>
          <td>50.0</td>
          <td>overburden</td>
          <td>1</td>
          <td>gamma</td>
        </tr>
        <tr>
          <th>10</th>
          <td>12</td>
          <td>0</td>
          <td>75.0</td>
          <td>miguel</td>
          <td>1</td>
          <td>gamma</td>
        </tr>
        <tr>
          <th>11</th>
          <td>12</td>
          <td>0</td>
          <td>100.0</td>
          <td>evan</td>
          <td>1</td>
          <td>gamma</td>
        </tr>
        <tr>
          <th>12</th>
          <td>12</td>
          <td>0</td>
          <td>130.0</td>
          <td>brian</td>
          <td>1</td>
          <td>gamma</td>
        </tr>
        <tr>
          <th>13</th>
          <td>12</td>
          <td>0</td>
          <td>131.0</td>
          <td>dieter</td>
          <td>1</td>
          <td>gamma</td>
        </tr>
        <tr>
          <th>14</th>
          <td>20</td>
          <td>0</td>
          <td>50.0</td>
          <td>overburden</td>
          <td>1</td>
          <td>epsilon</td>
        </tr>
        <tr>
          <th>15</th>
          <td>20</td>
          <td>0</td>
          <td>75.0</td>
          <td>miguel</td>
          <td>1</td>
          <td>epsilon</td>
        </tr>
        <tr>
          <th>16</th>
          <td>20</td>
          <td>0</td>
          <td>100.0</td>
          <td>evan</td>
          <td>1</td>
          <td>epsilon</td>
        </tr>
        <tr>
          <th>17</th>
          <td>20</td>
          <td>0</td>
          <td>120.0</td>
          <td>brian</td>
          <td>1</td>
          <td>epsilon</td>
        </tr>
        <tr>
          <th>18</th>
          <td>20</td>
          <td>0</td>
          <td>121.0</td>
          <td>dieter</td>
          <td>1</td>
          <td>epsilon</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-96

GemPy model
----------------


.. GENERATED FROM PYTHON SOURCE LINES 98-99

Create gempy model object

.. GENERATED FROM PYTHON SOURCE LINES 99-107

.. code-block:: python3

    geo_model = gp.create_model('welly_integration')

    extent = [-100, 300, -100, 200, -150, 0]
    res = [60, 60, 60]

    # Initializting model using the striplog df
    gp.init_data(geo_model, extent, res, surface_points_df=df)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular']

    welly_integration  2021-04-18 11:39



.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: python3

    geo_model.surface_points.df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>X_c</th>
          <th>Y_c</th>
          <th>Z_c</th>
          <th>surface</th>
          <th>series</th>
          <th>id</th>
          <th>order_series</th>
          <th>smooth</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>0</td>
          <td>50.0</td>
          <td>0.44</td>
          <td>0.47</td>
          <td>0.25</td>
          <td>overburden</td>
          <td>Default series</td>
          <td>1</td>
          <td>1</td>
          <td>2.00e-06</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>0</td>
          <td>80.0</td>
          <td>0.44</td>
          <td>0.47</td>
          <td>0.44</td>
          <td>miguel</td>
          <td>Default series</td>
          <td>2</td>
          <td>1</td>
          <td>2.00e-06</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>0</td>
          <td>100.0</td>
          <td>0.44</td>
          <td>0.47</td>
          <td>0.56</td>
          <td>evan</td>
          <td>Default series</td>
          <td>3</td>
          <td>1</td>
          <td>2.00e-06</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0</td>
          <td>0</td>
          <td>130.0</td>
          <td>0.44</td>
          <td>0.47</td>
          <td>0.74</td>
          <td>brian</td>
          <td>Default series</td>
          <td>4</td>
          <td>1</td>
          <td>2.00e-06</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>0</td>
          <td>131.0</td>
          <td>0.44</td>
          <td>0.47</td>
          <td>0.75</td>
          <td>dieter</td>
          <td>Default series</td>
          <td>5</td>
          <td>1</td>
          <td>2.00e-06</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: python3

    geo_model.surfaces






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style  type="text/css" >
    #T_e9ed8_row0_col3{
                background-color:  #015482;
            }#T_e9ed8_row1_col3{
                background-color:  #9f0052;
            }#T_e9ed8_row2_col3{
                background-color:  #ffbe00;
            }#T_e9ed8_row3_col3{
                background-color:  #728f02;
            }#T_e9ed8_row4_col3{
                background-color:  #443988;
            }</style><table id="T_e9ed8_" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>    </tr></thead><tbody>
                    <tr>
                            <th id="T_e9ed8_level0_row0" class="row_heading level0 row0" >0</th>
                            <td id="T_e9ed8_row0_col0" class="data row0 col0" >overburden</td>
                            <td id="T_e9ed8_row0_col1" class="data row0 col1" >Default series</td>
                            <td id="T_e9ed8_row0_col2" class="data row0 col2" >1</td>
                            <td id="T_e9ed8_row0_col3" class="data row0 col3" >#015482</td>
                            <td id="T_e9ed8_row0_col4" class="data row0 col4" >1</td>
                </tr>
                <tr>
                            <th id="T_e9ed8_level0_row1" class="row_heading level0 row1" >1</th>
                            <td id="T_e9ed8_row1_col0" class="data row1 col0" >miguel</td>
                            <td id="T_e9ed8_row1_col1" class="data row1 col1" >Default series</td>
                            <td id="T_e9ed8_row1_col2" class="data row1 col2" >2</td>
                            <td id="T_e9ed8_row1_col3" class="data row1 col3" >#9f0052</td>
                            <td id="T_e9ed8_row1_col4" class="data row1 col4" >2</td>
                </tr>
                <tr>
                            <th id="T_e9ed8_level0_row2" class="row_heading level0 row2" >2</th>
                            <td id="T_e9ed8_row2_col0" class="data row2 col0" >evan</td>
                            <td id="T_e9ed8_row2_col1" class="data row2 col1" >Default series</td>
                            <td id="T_e9ed8_row2_col2" class="data row2 col2" >3</td>
                            <td id="T_e9ed8_row2_col3" class="data row2 col3" >#ffbe00</td>
                            <td id="T_e9ed8_row2_col4" class="data row2 col4" >3</td>
                </tr>
                <tr>
                            <th id="T_e9ed8_level0_row3" class="row_heading level0 row3" >3</th>
                            <td id="T_e9ed8_row3_col0" class="data row3 col0" >brian</td>
                            <td id="T_e9ed8_row3_col1" class="data row3 col1" >Default series</td>
                            <td id="T_e9ed8_row3_col2" class="data row3 col2" >4</td>
                            <td id="T_e9ed8_row3_col3" class="data row3 col3" >#728f02</td>
                            <td id="T_e9ed8_row3_col4" class="data row3 col4" >4</td>
                </tr>
                <tr>
                            <th id="T_e9ed8_level0_row4" class="row_heading level0 row4" >4</th>
                            <td id="T_e9ed8_row4_col0" class="data row4 col0" >dieter</td>
                            <td id="T_e9ed8_row4_col1" class="data row4 col1" >Default series</td>
                            <td id="T_e9ed8_row4_col2" class="data row4 col2" >5</td>
                            <td id="T_e9ed8_row4_col3" class="data row4 col3" >#443988</td>
                            <td id="T_e9ed8_row4_col4" class="data row4 col4" >5</td>
                </tr>
        </tbody></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 114-122

.. code-block:: python3

    dec_list = []
    for e, i in enumerate(striplog_dict['alpha']):
        dec_list.append(Decor({'_colour': geo_model.surfaces.df.loc[e, 'color'],
                               'width': None,
                               'component': i.primary,
                               'hatch': None}))









.. GENERATED FROM PYTHON SOURCE LINES 123-125

welly plot with gempy colors
Create Decor list

.. GENERATED FROM PYTHON SOURCE LINES 125-136

.. code-block:: python3

    dec_list = []
    for e, i in enumerate(striplog_dict['alpha']):
        dec_list.append(Decor({'_colour': geo_model.surfaces.df.loc[e, 'color'],
                               'width': None,
                               'component': i.primary,
                               'hatch': None}))

    # Create legend
    legend = Legend(dec_list)
    legend






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>hatch</th><th>component</th><th>width</th><th>colour</th></tr><tr><td style="color:black; background-color:white">None</td><td style="color:black; background-color:white"><table><tr><td><strong>lith</strong></td><td>overburden</td></tr></table></td><td style="color:black; background-color:white">None</td><td style="color:#ffffff; background-color:#015482">#015482</td></tr><tr><td style="color:black; background-color:white">None</td><td style="color:black; background-color:white"><table><tr><td><strong>lith</strong></td><td>miguel</td></tr></table></td><td style="color:black; background-color:white">None</td><td style="color:#ffffff; background-color:#9f0052">#9f0052</td></tr><tr><td style="color:black; background-color:white">None</td><td style="color:black; background-color:white"><table><tr><td><strong>lith</strong></td><td>evan</td></tr></table></td><td style="color:black; background-color:white">None</td><td style="color:#000000; background-color:#ffbe00">#ffbe00</td></tr><tr><td style="color:black; background-color:white">None</td><td style="color:black; background-color:white"><table><tr><td><strong>lith</strong></td><td>brian</td></tr></table></td><td style="color:black; background-color:white">None</td><td style="color:#ffffff; background-color:#728f02">#728f02</td></tr><tr><td style="color:black; background-color:white">None</td><td style="color:black; background-color:white"><table><tr><td><strong>lith</strong></td><td>dieter</td></tr></table></td><td style="color:black; background-color:white">None</td><td style="color:#ffffff; background-color:#443988">#443988</td></tr></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 137-138

Plot striplogs:

.. GENERATED FROM PYTHON SOURCE LINES 138-145

.. code-block:: python3

    f, a = plt.subplots(ncols=4, sharey=True)

    for e, log in enumerate(striplog_dict.items()):
        log[1].plot(ax=a[e], legend=legend)
    f.tight_layout()
    plt.show()




.. image:: /integrations/images/sphx_glr_gempy_striplog_002.png
    :alt: gempy striplog
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-147

Modifying the coordinates to make more sense

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: python3

    geo_model.surface_points.df[['X', 'Y']] = geo_model.surface_points.df[['X', 'Y']] * 10
    geo_model.surface_points.df['Z'] *= -1








.. GENERATED FROM PYTHON SOURCE LINES 151-152

Delete points of the basement surface since we are intepolating bottoms (that surface wont exit).

.. GENERATED FROM PYTHON SOURCE LINES 152-154

.. code-block:: python3

    geo_model.delete_surface_points_basement()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 155-156

Adding an arbitrary orientation. Remember gempy need an orientation per series

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: python3

    geo_model.set_default_orientation()
    geo_model.modify_orientations(0, X=-500)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>G_x</th>
          <th>G_y</th>
          <th>G_z</th>
          <th>smooth</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>-500.0</td>
          <td>1.00e-05</td>
          <td>1.00e-05</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>1.0</td>
          <td>0.01</td>
          <td>overburden</td>
        </tr>
      </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 160-163

.. code-block:: python3

    gp.plot_2d(geo_model)





.. image:: /integrations/images/sphx_glr_gempy_striplog_003.png
    :alt: Cell Number: mid Direction: y
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <gempy.plot.visualization_2d.Plot2D object at 0x7fcc3707c0a0>



.. GENERATED FROM PYTHON SOURCE LINES 164-166

.. code-block:: python3

    gp.set_interpolator(geo_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Setting kriging parameters to their default values.
    Compiling theano function...
    Level of Optimization:  fast_compile
    Device:  cpu
    Precision:  float64
    Number of faults:  0
    Compilation Done!
    Kriging values: 
                      values
    range            522.02
    $C_o$            6488.1
    drift equations     [3]

    <gempy.core.interpolator.InterpolatorModel object at 0x7fcc46e8d8b0>



.. GENERATED FROM PYTHON SOURCE LINES 167-169

.. code-block:: python3

    gp.compute_model(geo_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    Lithology ids 
      [5. 5. 5. ... 1. 1. 1.] 




.. GENERATED FROM PYTHON SOURCE LINES 170-173

.. code-block:: python3


    p2d = gp.plot_2d(geo_model, cell_number=[30], show_data=True, show=True)




.. image:: /integrations/images/sphx_glr_gempy_striplog_004.png
    :alt: Cell Number: 30 Direction: y
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 174-177

.. code-block:: python3

    gp.plot_3d(geo_model)





.. image:: /integrations/images/sphx_glr_gempy_striplog_005.png
    :alt: gempy striplog
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <gempy.plot.vista.GemPyToVista object at 0x7fcc467e8970>



.. GENERATED FROM PYTHON SOURCE LINES 178-185

Pinch out model
------------------

As we can see the 3D model generated above does not honor the forth well
lets fix it. First lets add an unconformity: between the yellow and
green layer:


.. GENERATED FROM PYTHON SOURCE LINES 187-189

.. code-block:: python3

    geo_model.add_features('Unconformity')






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>order_series</th>
          <th>BottomRelation</th>
          <th>isActive</th>
          <th>isFault</th>
          <th>isFinite</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Default series</th>
          <td>1</td>
          <td>Erosion</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Unconformity</th>
          <td>2</td>
          <td>Erosion</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
        </tr>
      </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-192

Now we set the green layer in the second series


.. GENERATED FROM PYTHON SOURCE LINES 194-197

.. code-block:: python3

    geo_model.map_stack_to_surfaces({'Uncomformity': ['brian', 'evan', 'dieter']})
    geo_model.add_surfaces('basement')






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style  type="text/css" >
    #T_6acb5_row0_col3{
                background-color:  #015482;
            }#T_6acb5_row1_col3{
                background-color:  #9f0052;
            }#T_6acb5_row2_col3{
                background-color:  #ffbe00;
            }#T_6acb5_row3_col3{
                background-color:  #728f02;
            }#T_6acb5_row4_col3{
                background-color:  #443988;
            }#T_6acb5_row5_col3{
                background-color:  #ff3f20;
            }</style><table id="T_6acb5_" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>    </tr></thead><tbody>
                    <tr>
                            <th id="T_6acb5_level0_row0" class="row_heading level0 row0" >0</th>
                            <td id="T_6acb5_row0_col0" class="data row0 col0" >overburden</td>
                            <td id="T_6acb5_row0_col1" class="data row0 col1" >Default series</td>
                            <td id="T_6acb5_row0_col2" class="data row0 col2" >1</td>
                            <td id="T_6acb5_row0_col3" class="data row0 col3" >#015482</td>
                            <td id="T_6acb5_row0_col4" class="data row0 col4" >1</td>
                </tr>
                <tr>
                            <th id="T_6acb5_level0_row1" class="row_heading level0 row1" >1</th>
                            <td id="T_6acb5_row1_col0" class="data row1 col0" >miguel</td>
                            <td id="T_6acb5_row1_col1" class="data row1 col1" >Default series</td>
                            <td id="T_6acb5_row1_col2" class="data row1 col2" >2</td>
                            <td id="T_6acb5_row1_col3" class="data row1 col3" >#9f0052</td>
                            <td id="T_6acb5_row1_col4" class="data row1 col4" >2</td>
                </tr>
                <tr>
                            <th id="T_6acb5_level0_row2" class="row_heading level0 row2" >2</th>
                            <td id="T_6acb5_row2_col0" class="data row2 col0" >evan</td>
                            <td id="T_6acb5_row2_col1" class="data row2 col1" >Uncomformity</td>
                            <td id="T_6acb5_row2_col2" class="data row2 col2" >1</td>
                            <td id="T_6acb5_row2_col3" class="data row2 col3" >#ffbe00</td>
                            <td id="T_6acb5_row2_col4" class="data row2 col4" >3</td>
                </tr>
                <tr>
                            <th id="T_6acb5_level0_row3" class="row_heading level0 row3" >3</th>
                            <td id="T_6acb5_row3_col0" class="data row3 col0" >brian</td>
                            <td id="T_6acb5_row3_col1" class="data row3 col1" >Uncomformity</td>
                            <td id="T_6acb5_row3_col2" class="data row3 col2" >2</td>
                            <td id="T_6acb5_row3_col3" class="data row3 col3" >#728f02</td>
                            <td id="T_6acb5_row3_col4" class="data row3 col4" >4</td>
                </tr>
                <tr>
                            <th id="T_6acb5_level0_row4" class="row_heading level0 row4" >4</th>
                            <td id="T_6acb5_row4_col0" class="data row4 col0" >dieter</td>
                            <td id="T_6acb5_row4_col1" class="data row4 col1" >Uncomformity</td>
                            <td id="T_6acb5_row4_col2" class="data row4 col2" >3</td>
                            <td id="T_6acb5_row4_col3" class="data row4 col3" >#443988</td>
                            <td id="T_6acb5_row4_col4" class="data row4 col4" >5</td>
                </tr>
                <tr>
                            <th id="T_6acb5_level0_row5" class="row_heading level0 row5" >5</th>
                            <td id="T_6acb5_row5_col0" class="data row5 col0" >basement</td>
                            <td id="T_6acb5_row5_col1" class="data row5 col1" >Uncomformity</td>
                            <td id="T_6acb5_row5_col2" class="data row5 col2" >4</td>
                            <td id="T_6acb5_row5_col3" class="data row5 col3" >#ff3f20</td>
                            <td id="T_6acb5_row5_col4" class="data row5 col4" >6</td>
                </tr>
        </tbody></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 198-200

Lastly we need to add a dummy orientation to the new series:


.. GENERATED FROM PYTHON SOURCE LINES 202-204

.. code-block:: python3

    geo_model.add_orientations(-500, 0, -100, 'dieter', [0, 0, 1])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>G_x</th>
          <th>G_y</th>
          <th>G_z</th>
          <th>smooth</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>-500.0</td>
          <td>1.00e-05</td>
          <td>1.00e-05</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>1.0</td>
          <td>0.01</td>
          <td>overburden</td>
        </tr>
        <tr>
          <th>1</th>
          <td>-500.0</td>
          <td>0.00e+00</td>
          <td>-1.00e+02</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>1.0</td>
          <td>0.01</td>
          <td>dieter</td>
        </tr>
      </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-207

Now we can compute:


.. GENERATED FROM PYTHON SOURCE LINES 209-211

.. code-block:: python3

    gp.compute_model(geo_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    Lithology ids 
      [6. 6. 6. ... 1. 1. 1.] 




.. GENERATED FROM PYTHON SOURCE LINES 212-220

.. code-block:: python3

    p = gp.plot_2d(geo_model, cell_number=[30], show_data=True)
    f, a = plt.subplots(ncols=4, sharey=True)

    for e, log in enumerate(striplog_dict.items()):
        log[1].plot(ax=a[e], legend=legend)
    f.tight_layout()
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /integrations/images/sphx_glr_gempy_striplog_006.png
          :alt: Cell Number: 30 Direction: y
          :class: sphx-glr-multi-img

    *

      .. image:: /integrations/images/sphx_glr_gempy_striplog_007.png
          :alt: gempy striplog
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 221-225

Getting better but not quite there yet. Since the yellow does not show
up in the last well the pinch out has to happen somewhere before so lets
add an artifial point to get that shape:


.. GENERATED FROM PYTHON SOURCE LINES 227-229

.. code-block:: python3

    geo_model.add_surface_points(200, 0, -75, 'evan');






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>smooth</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>-50.0</td>
          <td>2.00e-06</td>
          <td>overburden</td>
        </tr>
        <tr>
          <th>5</th>
          <td>100.0</td>
          <td>100.0</td>
          <td>-50.0</td>
          <td>2.00e-06</td>
          <td>overburden</td>
        </tr>
        <tr>
          <th>9</th>
          <td>120.0</td>
          <td>0.0</td>
          <td>-50.0</td>
          <td>2.00e-06</td>
          <td>overburden</td>
        </tr>
        <tr>
          <th>14</th>
          <td>200.0</td>
          <td>0.0</td>
          <td>-50.0</td>
          <td>2.00e-06</td>
          <td>overburden</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>-80.0</td>
          <td>2.00e-06</td>
          <td>miguel</td>
        </tr>
        <tr>
          <th>6</th>
          <td>100.0</td>
          <td>100.0</td>
          <td>-75.0</td>
          <td>2.00e-06</td>
          <td>miguel</td>
        </tr>
        <tr>
          <th>10</th>
          <td>120.0</td>
          <td>0.0</td>
          <td>-75.0</td>
          <td>2.00e-06</td>
          <td>miguel</td>
        </tr>
        <tr>
          <th>15</th>
          <td>200.0</td>
          <td>0.0</td>
          <td>-75.0</td>
          <td>2.00e-06</td>
          <td>miguel</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>-100.0</td>
          <td>2.00e-06</td>
          <td>evan</td>
        </tr>
        <tr>
          <th>11</th>
          <td>120.0</td>
          <td>0.0</td>
          <td>-100.0</td>
          <td>2.00e-06</td>
          <td>evan</td>
        </tr>
        <tr>
          <th>16</th>
          <td>200.0</td>
          <td>0.0</td>
          <td>-100.0</td>
          <td>2.00e-06</td>
          <td>evan</td>
        </tr>
        <tr>
          <th>18</th>
          <td>200.0</td>
          <td>0.0</td>
          <td>-75.0</td>
          <td>1.00e-06</td>
          <td>evan</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>-130.0</td>
          <td>2.00e-06</td>
          <td>brian</td>
        </tr>
        <tr>
          <th>7</th>
          <td>100.0</td>
          <td>100.0</td>
          <td>-110.0</td>
          <td>2.00e-06</td>
          <td>brian</td>
        </tr>
        <tr>
          <th>12</th>
          <td>120.0</td>
          <td>0.0</td>
          <td>-130.0</td>
          <td>2.00e-06</td>
          <td>brian</td>
        </tr>
        <tr>
          <th>17</th>
          <td>200.0</td>
          <td>0.0</td>
          <td>-120.0</td>
          <td>2.00e-06</td>
          <td>brian</td>
        </tr>
      </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 230-239

.. code-block:: python3

    gp.compute_model(geo_model)
    p = gp.plot_2d(geo_model, cell_number=[30], show_data=True)
    f, a = plt.subplots(ncols=4, sharey=True)

    for e, log in enumerate(striplog_dict.items()):
        log[1].plot(ax=a[e], legend=legend)
    f.tight_layout()
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /integrations/images/sphx_glr_gempy_striplog_008.png
          :alt: Cell Number: 30 Direction: y
          :class: sphx-glr-multi-img

    *

      .. image:: /integrations/images/sphx_glr_gempy_striplog_009.png
          :alt: gempy striplog
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 240-241

sphinx_gallery_thumbnail_number = 7

.. GENERATED FROM PYTHON SOURCE LINES 241-243

.. code-block:: python3

    gp.plot_3d(geo_model)




.. image:: /integrations/images/sphx_glr_gempy_striplog_010.png
    :alt: gempy striplog
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <gempy.plot.vista.GemPyToVista object at 0x7fcc6bbb8190>



.. GENERATED FROM PYTHON SOURCE LINES 244-245

gp.save_model(geo_model)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.397 seconds)


.. _sphx_glr_download_integrations_gempy_striplog.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: gempy_striplog.py <gempy_striplog.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: gempy_striplog.ipynb <gempy_striplog.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
